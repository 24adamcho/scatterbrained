{
  "metadata": "\nSCATTERBRAINED\n",
  "title": "docs",
  "nodes": [
    {
      "id": "1699250577347.35035",
      "type": "note",
      "position": {
        "x": 15,
        "y": 48.5
      },
      "width": 224,
      "height": 100,
      "style": {
        "width": 224,
        "height": 100
      },
      "resizing": false,
      "data": {
        "content": "<h1>Scatterbrained</h1><p>Variable and component graph</p><p><br></p><p>Style guide:</p><p class=\"ql-indent-1\">Variables are <em>italicized</em> outside of their definition in variables list.</p><p class=\"ql-indent-1\">Components are <strong>bold</strong> outside of their definition in components list.</p><p class=\"ql-indent-1\">References to other components in description should be extracted and put as footnotes.</p><p class=\"ql-indent-1\">useEffect callbacks are distinguished by their render triggers</p><p class=\"ql-indent-2\">Example: useEffect [variable, othervariable]</p><p class=\"ql-indent-1\">Function callbacks include their parameters</p><p class=\"ql-indent-1\"><br></p>"
      }
    },
    {
      "id": "1699250638486.71929",
      "type": "note",
      "position": {
        "x": 576,
        "y": 10.5
      },
      "style": {
        "backgroundColor": "rgb(91, 215, 104)",
        "width": 130,
        "height": 100
      },
      "width": 130,
      "height": 100,
      "resizing": false,
      "data": {
        "content": "<h1>App</h1><p><br></p><h2>Variables:</h2><ul><li>style</li><li class=\"ql-indent-1\">css style to append to <strong>App</strong></li><li class=\"ql-indent-1\">root selector variables for swapping colors</li><li>nodeRef</li><li class=\"ql-indent-1\">reference to <strong>GraphEditor</strong></li><li>textRef</li><li class=\"ql-indent-1\">reference to <strong>TextEditor</strong></li><li>sizes</li><li class=\"ql-indent-1\">diimensions of <strong>Split</strong></li><li>nodeCount, edgeCount, charCount, wordCount</li><li class=\"ql-indent-1\">counter variables for <strong>BottomBar</strong></li><li>isSaved<sub>1</sub></li><li class=\"ql-indent-1\">save state flag</li><li class=\"ql-indent-1\">if true, means that the document has been saved and no changes have been made.</li><li class=\"ql-indent-1\">if false, means that the document has been modified with unsaved changes.</li><li>title</li><li class=\"ql-indent-1\">window text</li><li>enableMiniMap</li><li class=\"ql-indent-1\">flag to enable the <strong>GraphEditor</strong> <strong>MiniMap</strong></li><li>tool<sub>2</sub></li><li class=\"ql-indent-1\">currently selected tool</li><li>enableGridSnap</li><li class=\"ql-indent-1\">flag to enable the <strong>GraphEditor</strong> <em>snapToGrid</em> property</li><li>bgstyle<sub>1</sub></li><li class=\"ql-indent-1\">currently selected <strong>GraphEditor</strong> background style</li><li class=\"ql-indent-2\">possible values:</li><li class=\"ql-indent-3\">'cross'</li><li class=\"ql-indent-3\">'lines'</li><li class=\"ql-indent-3\">'dots'</li><li>keyBinds</li><li class=\"ql-indent-1\">list of keybinds for <strong>GraphEditor</strong></li><li class=\"ql-indent-1\">extensible to other funcitonality</li><li class=\"ql-indent-1\">current keybinds:</li><li class=\"ql-indent-2\"><strong><u>t</u></strong>: pointer tool</li><li class=\"ql-indent-2\"><strong><u>v</u></strong>: line tool</li><li class=\"ql-indent-2\"><strong><u>ctrl-a</u></strong>: select all</li><li class=\"ql-indent-2\"><strong><u>Insert</u></strong>: insert new node</li><li class=\"ql-indent-2\"><strong><u>f</u></strong>: fit view</li><li class=\"ql-indent-2\"><strong><u>z (no ctrl)</u></strong>: default zoom</li><li class=\"ql-indent-2\"><strong><u>ctrl-z</u></strong>: undo</li><li class=\"ql-indent-2\"><strong><u>ctrl-y</u></strong>: redo</li><li class=\"ql-indent-2\"><strong><u>Backspace, g, Delete</u></strong>: delete</li><li class=\"ql-indent-2\">other:</li><li class=\"ql-indent-3\"><strong><u>Shift + click</u></strong>: multiselect</li><li class=\"ql-indent-3\"><strong><u>Ctrl + click</u></strong>: drag select</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>setStyle</li><li class=\"ql-indent-1\">sets the current palette to append to <strong>App</strong></li><li>changeStyle</li><li class=\"ql-indent-1\">calls <em>setStyle</em> in a no-arg bool flip</li><li class=\"ql-indent-1\">TODO: add different palettes?</li><li>setSize</li><li class=\"ql-indent-1\">sets the current dimensions of <strong>Split</strong></li><li>setNodeCount, setEdgeCount, setCharCount, setWordCount</li><li class=\"ql-indent-1\">set counters for <strong>BottomBar</strong></li><li>setIsSaved</li><li class=\"ql-indent-1\">set the current <em>isSaved</em> flag state</li><li>unloadAlert [<em>isSaved</em>]</li><li class=\"ql-indent-1\">prevents closing the window when <em>isSaved</em> is false</li><li class=\"ql-indent-1\">TODO: not working in chrome, only tested on firefox, might not work when closing window instead of just tab</li><li>setTitle</li><li class=\"ql-indent-1\">sets the current window title</li><li>useEffect [<em>title, isSaved, nodeCount, edgeCount</em>]</li><li class=\"ql-indent-1\">changes <em>title</em> when <em>isSaved</em> is updated</li><li>setMiniMapState</li><li class=\"ql-indent-1\">sets the current <em>enableMiniMap</em> bool state</li><li>changeMiniMapState</li><li class=\"ql-indent-1\">calls <em>enableMiniMap</em> in a no-arg bool flip</li><li>setTool</li><li class=\"ql-indent-1\">sets the current tool</li><li>setGridSnap</li><li class=\"ql-indent-1\">sets the current <em>enableGridSnap</em> bool state</li><li>changeGridSnapState</li><li class=\"ql-indent-1\">calls <em>setGridSnap</em> in a no-arg bool flip</li><li>setBgstyle</li><li class=\"ql-indent-1\">changes current <em>bgstyle</em></li><li>setKeybinds</li><li class=\"ql-indent-1\">unused</li><li class=\"ql-indent-1\">TODO: keybind customizer in <strong>TopBar</strong>-&gt;<strong>Navbar.Item</strong> View?</li></ul><p><br></p><h2>Components:</h2><ul><li>div App</li><li class=\"ql-indent-1\">Wrapper div</li><li class=\"ql-indent-1\">applies <em>style</em></li><li class=\"ql-indent-1\">TopBar</li><li class=\"ql-indent-2\">calls <em>changeStyle, setTitle, changeMiniMapState, changeGridSnapState, setBgstyle, setIsSaved</em></li><li class=\"ql-indent-1\">Split contentWrapper</li><li class=\"ql-indent-2\"><em>react-split</em> component</li><li class=\"ql-indent-2\">calls <em>setSize</em> on drag</li><li class=\"ql-indent-2\">div leftContentWrapper</li><li class=\"ql-indent-3\">GraphEditor</li><li class=\"ql-indent-4\">calls <em>setNodeCount, setEdgeCount, setTool, setIsSaved</em></li><li class=\"ql-indent-2\">div rightContentWrapper</li><li class=\"ql-indent-3\">TextEditor</li><li class=\"ql-indent-4\">calls <em>setCharCount, setWordCount</em></li><li class=\"ql-indent-1\">BottomBar</li></ul><p><br></p><h2>Description:</h2><p>Topmost component of the react webapp.</p><p><br></p><p>[1] see <strong>GraphEditor, TopBar</strong></p><p>[2] see <strong>SidebarContextMenu</strong></p>"
      }
    },
    {
      "id": "1699250791239.69913",
      "type": "note",
      "position": {
        "x": 269,
        "y": 222.5
      },
      "width": 130,
      "height": 100,
      "style": {
        "backgroundColor": "rgb(159, 96, 208)"
      },
      "data": {
        "content": "<h1>TopBar</h1><p><br></p><h2>Variables:</h2><ul><li>nightmodeStateText</li><li class=\"ql-indent-1\">button text variable</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>nightmodeButton</li><li class=\"ql-indent-1\">changes light/night button text</li><li class=\"ql-indent-1\">calls <em>props.changeStyle</em><sub>1</sub></li><li>openFile</li><li class=\"ql-indent-1\">async file reference from client</li><li>open</li><li class=\"ql-indent-1\">reads file contents and sets it to <strong>GraphEditor</strong>'s data<sub>2</sub></li><li>saveFile(blob)</li><li class=\"ql-indent-1\">async save file to client</li><li>save</li><li class=\"ql-indent-1\">saves the contents of <strong>GraphEditor</strong> to file<sub>2</sub></li></ul><h3><strong>Other sorts:</strong></h3><ul><li>useKey(key, cb)</li><li class=\"ql-indent-1\">function to create a global document hook to replace default ctrl-s and ctrl-o behavior</li></ul><p><br></p><h2>Components:</h2><ul><li>all of these components are from <em>react-bootstrap</em></li><li class=\"ql-indent-1\">Navbar</li><li class=\"ql-indent-2\">Container</li><li class=\"ql-indent-3\">Nav</li><li class=\"ql-indent-4\">NavDropdown 'File'</li><li class=\"ql-indent-5\">NavDropdown.Item</li><li class=\"ql-indent-6\">Open File</li><li class=\"ql-indent-6\">calls <em>open</em></li><li class=\"ql-indent-5\">NavDropdown.Item</li><li class=\"ql-indent-6\">Save File</li><li class=\"ql-indent-6\">calls <em>save</em></li><li class=\"ql-indent-4\">NavDropdown 'Edit'</li><li class=\"ql-indent-5\">NavDropdown.Item</li><li class=\"ql-indent-6\">Snap To Grid</li><li class=\"ql-indent-6\">calls <em>props.changeGridSnapState</em></li><li class=\"ql-indent-4\">NavDropdown 'View'</li><li class=\"ql-indent-5\">NavDropdown.Item</li><li class=\"ql-indent-6\"><em>nightmodeStateText</em></li><li class=\"ql-indent-6\">calls <em>nightmodeButton</em></li><li class=\"ql-indent-5\">NavDropdown.Item</li><li class=\"ql-indent-6\">Mini Map</li><li class=\"ql-indent-6\">calls <em>props.changeMiniMapState</em></li><li class=\"ql-indent-5\">NavDropdown 'Change background'</li><li class=\"ql-indent-6\">NavDropdown.Item</li><li class=\"ql-indent-7\">Crosses</li><li class=\"ql-indent-7\">calls <em>props.setBgstyle('cross')</em></li><li class=\"ql-indent-6\">NavDropdown.Item</li><li class=\"ql-indent-7\">Lines</li><li class=\"ql-indent-7\">calls <em>props.setBgstyle('lines')</em></li><li class=\"ql-indent-6\">NavDropdown.Item</li><li class=\"ql-indent-7\">None</li><li class=\"ql-indent-7\">calls <em>props.setBgstyle('dots')</em></li><li class=\"ql-indent-8\">normally supposed to set it to a dots style but it doesn't work for whatever reason. But; no markers is fine too.</li><li class=\"ql-indent-3\">Navbar.Brand</li><li class=\"ql-indent-4\">Scatterbrained</li></ul><p><br></p><h2>Properties:</h2><ul><li>props</li><li class=\"ql-indent-1\">changeStyle</li><li class=\"ql-indent-2\">function to change global css :root palette variables<sub>1</sub></li><li class=\"ql-indent-1\">nodeRef<sub>2</sub></li><li class=\"ql-indent-2\">reference to <strong>GraphEditor</strong> functions</li><li class=\"ql-indent-1\">setTitle</li><li class=\"ql-indent-2\">function to change document title</li><li class=\"ql-indent-1\">title</li><li class=\"ql-indent-1\">changeMiniMapState</li><li class=\"ql-indent-2\">function to change mini map enabling boolean<sub>1</sub></li><li class=\"ql-indent-1\">changeGridSnapState</li><li class=\"ql-indent-2\">function to change grid snap enabling boolean<sub>1</sub></li><li class=\"ql-indent-1\">setBgstyle</li><li class=\"ql-indent-2\">function to change background style<sub>1</sub></li><li class=\"ql-indent-1\">tool</li><li class=\"ql-indent-2\">current tool state<sub>3</sub></li><li class=\"ql-indent-1\">setIsSaved</li><li class=\"ql-indent-2\">sets current save state flag<sub>1</sub></li></ul><p><br></p><h2>Description:</h2><p>Top bar toolbar for opening and saving files, and changing aspects of the display.</p><p><br></p><p>[1] see <strong>App</strong></p><p>[2] see <strong>GraphEditor</strong></p><p>[3] see <strong>SidebarContextMenu</strong></p>"
      }
    },
    {
      "id": "1699250819347.75186",
      "type": "note",
      "position": {
        "x": 868,
        "y": 189.8669887811442
      },
      "width": 191,
      "height": 100,
      "style": {
        "width": 191,
        "height": 100,
        "backgroundColor": "rgb(159, 96, 208)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>BottomBar</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li><br></li></ul><p><br></p><h2>Components:</h2><ul><li>div bottomBar</li><li class=\"ql-indent-1\">div leftContent</li><li class=\"ql-indent-2\">span nodeCount</li><li class=\"ql-indent-2\">span edgeCount</li><li class=\"ql-indent-1\">div rightContent</li><li class=\"ql-indent-2\">div charCount</li><li class=\"ql-indent-2\">div wordCount</li></ul><p><br></p><h2>Properties:</h2><ul><li>nodes</li><li class=\"ql-indent-1\"><em>nodeCount</em><sub>1, 2</sub></li><li>edges</li><li class=\"ql-indent-1\"><em>edgeCount</em><sub>1, 2</sub></li><li>chars</li><li class=\"ql-indent-1\"><em>charCount</em><sub>1, 3</sub></li><li>words</li><li class=\"ql-indent-1\"><em>wordCount</em><sub>1, 3</sub></li></ul><p><br></p><h2>Description:</h2><p>Displays document information relating to counts of nodes, edges, chars, and words.</p><p><br></p><p>[1] see <strong>App</strong></p><p>[2] see <strong>GraphEditor</strong></p><p>[3] see <strong>TextEditor</strong></p>"
      }
    },
    {
      "id": "1699250920271.55875",
      "type": "note",
      "position": {
        "x": 336,
        "y": 365
      },
      "width": 203,
      "height": 100,
      "style": {
        "width": 203,
        "height": 100,
        "backgroundColor": "rgb(211, 79, 79)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>GraphEditor</h1><p><br></p><h2>Variables:</h2><ul><li>nodeTypes</li><li class=\"ql-indent-1\">list of node types<sub>1</sub></li><li>reactFlowWrapper</li><li class=\"ql-indent-1\">element reference to flowInterfaceWrapper</li><li>nodes</li><li class=\"ql-indent-1\">current nodes</li><li>edges</li><li class=\"ql-indent-1\">current edges</li><li>element</li><li class=\"ql-indent-1\">current state of the undo history manager<sub>2</sub></li><li>past</li><li class=\"ql-indent-1\">unused</li><li class=\"ql-indent-1\">list of all previous states of history manager</li><li>marked</li><li class=\"ql-indent-1\">bool to check if the current modification to <em>nodes </em>or <em>edges</em> should be catloged in the history manager</li><li>newEdge</li><li class=\"ql-indent-1\">connection line and data for the new edge to be placed if connection is valid</li><li>nodeId</li><li class=\"ql-indent-1\">currently selected node</li><li>prevNodeId</li><li class=\"ql-indent-1\">previously selected node</li><li>selectedNodes</li><li class=\"ql-indent-1\">list of selected nodes</li><li>selectedEdges</li><li class=\"ql-indent-1\">list of selected edges</li><li>connectingNodeId</li><li class=\"ql-indent-1\">source node id of connecting line<sub>3</sub></li><li>menu</li><li class=\"ql-indent-1\">current right click context menu data</li><li>clipboard</li><li class=\"ql-indent-1\">copy/cut/paste buffer</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>project</li><li class=\"ql-indent-1\">reactflow function to project absolute window coordinates to the <strong>ReactFlow</strong> pane</li><li>fitview</li><li class=\"ql-indent-1\">reactflow function to fit as much into the <strong>ReactFlow</strong> pane as possible</li><li>zoomTo</li><li class=\"ql-indent-1\">reactflow function to set the current zoom level</li><li>setNodes</li><li class=\"ql-indent-1\">sets <em>nodes</em> to the passed array</li><li>onNodesChange</li><li class=\"ql-indent-1\">half undocumented</li><li class=\"ql-indent-1\">presumably projects the modifications to <em>nodes</em>? unknown</li><li>setEdges</li><li class=\"ql-indent-1\">sets <em>edges</em>to the passed array</li><li>onEdgesChange</li><li class=\"ql-indent-1\">see <em>onNodesChange</em></li><li>setElement</li><li class=\"ql-indent-1\">pushes data into the history manager</li><li>undo</li><li class=\"ql-indent-1\">pops off the previous state of the history manager and sets <em>element </em>to it</li><li>redo</li><li class=\"ql-indent-1\">pops off the next state of the history manager and sets <em>element </em>to it</li><li>reset</li><li class=\"ql-indent-1\">clears all history in the history manager</li><li>setMark</li><li class=\"ql-indent-1\">changes <em>mark</em></li><li>markHistory</li><li class=\"ql-indent-1\">function to mark history for history manager cataloging</li><li>useEffect [<em>nodes, edges, marked, setElement</em>]</li><li class=\"ql-indent-1\">pushes a new state the history manager if the change to <em>nodes </em>or <em>edges </em>was marked for history<sub>4</sub></li><li>useEffect [<em>setNodes, setEdges, element</em>]</li><li class=\"ql-indent-1\">changes <em>ndoes</em> and <em>edges </em>to reflect the current state of history</li><li class=\"ql-indent-1\">in the case of redundant state, essentially sets them to themselves</li><li>undoWrapper</li><li class=\"ql-indent-1\">wrapper for <em>undo</em></li><li>redoWrapper</li><li class=\"ql-indent-1\">ditto</li><li>resetWrapper</li><li class=\"ql-indent-1\">ditto</li><li>setNewEdge</li><li class=\"ql-indent-1\">modifies <em>newEdge</em></li><li>sanitizeNewEdge</li><li class=\"ql-indent-1\">sanitizes <em>newEdge</em></li><li class=\"ql-indent-2\">removes <em>svgWrapperStyle</em><sub>5</sub><em> </em>and <em>reversed</em><sub>6</sub>, as they do not apply to new edges</li><li>setNodeId</li><li class=\"ql-indent-1\">sets the currently selected node's id</li><li>setPrevNodeId</li><li class=\"ql-indent-1\">sets the previously selected node's id</li><li>setSelectedNodes</li><li class=\"ql-indent-1\">change selected <em>nodes </em>array</li><li>setSelectedEdges</li><li class=\"ql-indent-1\">change selected <em>edges </em>array</li><li>useEffect [<em>tool, setNodes, element</em>]</li><li class=\"ql-indent-1\">patch to update <em>nodes</em> and <em>edges</em>' <em>tool</em> property when using the history manager</li><li>useEffect [<em>nodes.length, edges.length</em>]</li><li class=\"ql-indent-1\">change node count for <strong>BottomBar</strong><sub><strong>7</strong></sub></li><li>onConnect(params)</li><li class=\"ql-indent-1\">adds new edge between connecting nodes</li><li>onConnectStart(_, node)</li><li class=\"ql-indent-1\">sets <em>connectingNodeId</em> to the connection source</li><li>onConnectEnd(params)</li><li class=\"ql-indent-1\">if the connection was made in the pointer tool and the user dropped it on the pane instead of another node, adds a new node<sub>3</sub></li><li>addNote(data)</li><li class=\"ql-indent-1\">adds a new node with <em>data</em> as its contents</li><li class=\"ql-indent-1\">marks history</li><li>addNoteIfBlanked(data)</li><li class=\"ql-indent-1\">adds a new node if no node is selected</li><li>changeNoteId(mouseEvent, node)</li><li class=\"ql-indent-1\">changes current node id and <strong>TextEditor</strong> contents<sub>8</sub></li><li>onNodeClick(mouseEvent, node)</li><li class=\"ql-indent-1\">special event logic for shift clicking vs regular clicking</li><li>clearEditor</li><li class=\"ql-indent-1\">clears <strong>TextEditor</strong><sub>8</sub> and resets <em>nodeId</em></li><li>setMenu</li><li class=\"ql-indent-1\">sets the current context menu metadata</li><li>onPaneContextMenu(mouseEvent)</li><li class=\"ql-indent-1\">event for context menu when right-clicking the B<strong>ackground </strong>pane of <strong>ReactFlow</strong></li><li>useOnTouch</li><li class=\"ql-indent-1\">sets <em>menu</em> to null</li><li>onPaneClick</li><li class=\"ql-indent-1\">sets <em>menu</em> to null, clears editor, and clears selection</li><li>onSelectionChange(params)</li><li class=\"ql-indent-1\">callback to set selected nodes and edges<sub>9</sub></li><li>useEffect [<em>selectedEdges</em>]</li><li class=\"ql-indent-1\">selects edges that go in opposite directions to the same nodes</li><li class=\"ql-indent-1\">may need to be removed</li><li>onNodeDoubleClick(_, node)</li><li class=\"ql-indent-1\">highlights node and all connected edges on double click</li><li>selectAll(event)</li><li class=\"ql-indent-1\">selects all nodes and edges</li><li>insertEvent</li><li class=\"ql-indent-1\">inserts a node</li><li>setClipboard</li><li class=\"ql-indent-1\">sets clipboard buffer</li><li>copy</li><li class=\"ql-indent-1\">copies selected nodes and edges</li><li>cut</li><li class=\"ql-indent-1\">copies and removes selected nodes and edges</li><li class=\"ql-indent-1\">marks history</li><li>paste</li><li class=\"ql-indent-1\">IF: only one edge copied, multiple nodes selected</li><li class=\"ql-indent-2\">repeats that edge multiple times between the last selected node and the other nodes</li><li class=\"ql-indent-1\">otherwise, copy nodes and edges with new ids</li><li class=\"ql-indent-2\">if there's an edge connecting to an uncopied node, duplicate that edge</li><li class=\"ql-indent-1\">marks history</li></ul><h3><strong>Other sorts:</strong></h3><ul><li>React.useImperativeHandle(ref)</li><li class=\"ql-indent-1\">editNote(content)</li><li class=\"ql-indent-2\">sets the currently selected node's <em>data.content</em> to <em>content</em><sub>8</sub></li><li class=\"ql-indent-1\">getNodes<sub>10</sub></li><li class=\"ql-indent-2\">returns <em>nodes</em></li><li class=\"ql-indent-1\">getEdges<sub>10</sub></li><li class=\"ql-indent-2\">returns <em>edges</em></li><li class=\"ql-indent-1\">setNewNodes(nodeList)<sub>10</sub></li><li class=\"ql-indent-2\">directly sets the values of <em>nodes</em></li><li class=\"ql-indent-1\">setNewEdges(edgeList)<sub>10</sub></li><li class=\"ql-indent-2\">directly sets the values of <em>edges</em></li><li class=\"ql-indent-1\">resetHistory</li><li class=\"ql-indent-2\">calls <em>resetWrapper</em></li></ul><p><br></p><h2>Components:</h2><ul><li>div flowInterfaceWrapper</li><li class=\"ql-indent-1\">Button addNoteButton</li><li class=\"ql-indent-2\">calls <em>addNote, clearEditor, changeNoteId</em></li><li class=\"ql-indent-1\">div toolsetOverlay</li><li class=\"ql-indent-2\">SidebarContextMenu</li><li class=\"ql-indent-2\">TopbarContextMenu</li><li class=\"ql-indent-1\">ReactFlow</li><li class=\"ql-indent-2\">calls <em>setIsSaved, onNodesChange, onNodeClick, onNodeDoubleClick, changeNoteId, markHistory, clearEditor, onConnect, onConnectStart, onConnectEnd, onPaneClick, onSelectionChange, onPaneContextMenu</em></li><li class=\"ql-indent-2\">Reference: <a href=\"https://reactflow.dev/api-reference\" rel=\"noopener noreferrer\" target=\"_blank\">https://reactflow.dev/api-reference</a></li><li class=\"ql-indent-1\">Background</li><li class=\"ql-indent-1\">div controlsWrapper</li><li class=\"ql-indent-2\">Controls</li><li class=\"ql-indent-2\">Minimap</li><li class=\"ql-indent-1\">PaneContext</li><li class=\"ql-indent-2\">enabled if <em>menu </em>is not null &amp;&amp; menu.type == 'pane'</li><li class=\"ql-indent-2\">calls <em>onPaneClick</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>propNodes</li><li class=\"ql-indent-1\">initial setting for <em>nodes</em></li><li>propEdges</li><li class=\"ql-indent-1\">initial setting for <em>edges</em></li><li>editTextRef</li><li class=\"ql-indent-1\">ref handle for <strong>TextEditor</strong><sub>8</sub></li><li>subcontentWidth</li><li class=\"ql-indent-1\">width of this element<sub>11</sub></li><li>setNodeCount</li><li class=\"ql-indent-1\">callback to set <em>nodeCount</em><sub>7</sub></li><li>setEdgeCount</li><li class=\"ql-indent-1\">callback to set <em>edgeCount</em><sub>7</sub></li><li>enableMiniMap</li><li class=\"ql-indent-1\">bool to enable <strong>MiniMap</strong></li><li>enableGridSnap</li><li class=\"ql-indent-1\">bool to enable grid snapping for <strong>ReactFlow</strong></li><li>bgstyle</li><li class=\"ql-indent-1\">current <strong>Background </strong>style</li><li>tool<sub>12</sub></li><li class=\"ql-indent-1\">currently selected tool</li><li>setTool</li><li class=\"ql-indent-1\">callback to set <em>tool</em></li><li>width<sub>13</sub></li><li class=\"ql-indent-1\">width of <strong>div toolsetOverlay</strong></li><li>keyBinds<sub>13</sub></li><li class=\"ql-indent-1\">list of control keybinds</li><li>setIsSaved<sub>10</sub></li><li>ref</li><li class=\"ql-indent-1\">reference to this component for sending functions upward in the object hierarchy</li><li class=\"ql-indent-1\">see Components-&gt;Other sorts-&gt;React.useImperativeHandle(ref)</li></ul><p><br></p><h2>Description:</h2><p><strong>GraphEditor </strong>is a custom interpretation of <em>reactflow</em> for the purposes of Scatterbrained. It includes various functionalities and connections to other components in this project.</p><p><br></p><p>[1] see <strong>NoteNode</strong></p><p>[2] <a href=\"https://github.com/xplato/useUndoable\" rel=\"noopener noreferrer\" target=\"_blank\">useUndoable</a></p><p>related functions and values:</p><ul><li>past</li><li>marked</li><li>setElement</li><li>undo</li><li>redo</li><li>reset</li><li>setMark</li><li>markHistory</li><li>useEffect [<em>nodes, edges, marked, setElement</em>]</li><li>useEffect [<em>setNodes, setEdges, element</em>]</li><li>undoRapper</li><li>redoWrapper</li><li>resetWrapper</li></ul><p>[3] see <a href=\"https://reactflow.dev/examples/nodes/add-node-on-edge-drop\" rel=\"noopener noreferrer\" target=\"_blank\">reactflow Add Node ON Edge Drop example</a></p><p>[4] see <em>marked</em></p><p>[5] see <strong>NewEdgeAnimationToggle</strong></p><p>[6] see <strong>NewEdgeReverse</strong></p><p>[7] see <strong>BottomBar</strong></p><p>[8] see <strong>TextEditor</strong></p><p>[9] see <strong>TopbarContextMenu</strong></p><p>[10] see <strong>TopBar</strong></p><p>[11] see <strong>App</strong>, <strong>Split</strong></p><p>[12] see <strong>SidebarContextMenu, App</strong></p><p>[13] see <strong>App</strong></p>"
      }
    },
    {
      "id": "1699250923417.98372",
      "type": "note",
      "position": {
        "x": 814.964145231631,
        "y": 352.2238911537455
      },
      "style": {
        "backgroundColor": "rgb(74, 84, 224)",
        "width": 180,
        "height": 100
      },
      "width": 180,
      "height": 100,
      "resizing": false,
      "data": {
        "content": "<h1>TextEditor</h1><p><br></p><h2>Variables:</h2><ul><li>modules</li><li class=\"ql-indent-1\">list of modules to enable in <strong>ReactQuill</strong><sub>1</sub></li><li>value</li><li class=\"ql-indent-1\">content variable of <strong>ReactQuill</strong></li><li>placeholder</li><li class=\"ql-indent-1\">placeholder text for when no content is entered</li><li>quillRef</li><li class=\"ql-indent-1\">reference to <strong>ReactQuill</strong></li></ul><h3><strong>Other sorts:</strong></h3><ul><li>Counter</li><li class=\"ql-indent-1\">word/char counting module for <em>modules</em><sub>2</sub></li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>value</em>, <em>editNodeRef</em>]</li><li class=\"ql-indent-1\">updates <em>editNodeRef</em> to have the content of <em>value</em><sub>3</sub></li><li>useEffect [<em>placeholder</em>]</li><li class=\"ql-indent-1\">updates <em>quillRef</em> to have its placeholder text set to <em>placeholder</em></li></ul><h3><strong>Other sorts:</strong></h3><ul><li>React.useImperativeHandle(ref)</li><li class=\"ql-indent-1\">editText(data)</li><li class=\"ql-indent-2\">sets <em>value</em> to <em>data</em></li><li class=\"ql-indent-1\">setPlaceHolder(data)</li><li class=\"ql-indent-2\">sets <em>placeholder</em> to <em>data</em></li></ul><p><br></p><h2>Components:</h2><ul><li>ReactQuill</li><li class=\"ql-indent-1\">calls <em>setValue</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>initvalue</li><li class=\"ql-indent-1\">initial <em>value</em> inside the editor</li><li>editNodeRef</li><li class=\"ql-indent-1\">reference to <strong>GraphEditor</strong></li><li>setCharCount</li><li class=\"ql-indent-1\">callback to set <em>charCount</em><sub>2</sub></li><li>setWordCount</li><li class=\"ql-indent-1\">callback to set <em>wordCount</em><sub>2</sub></li><li>ref</li><li class=\"ql-indent-1\">reference to this component</li></ul><p><br></p><h2>Description:</h2><p><strong>TextEditor</strong> is a custom interpretation of <em>ReactQuill </em>for the purposes of Scatterbrained. It is designed specifically to interface with <strong>GraphEditor</strong> for functionality.</p><p><br></p><p>[1] view documentation for <strong>ReactQuill</strong> <a href=\"https://github.com/zenoamaro/react-quill\" rel=\"noopener noreferrer\" target=\"_blank\">here</a></p><p>[2] see <strong>App</strong>, <strong>BottomBar</strong></p><p>[3] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "id": "1699251415847.99844",
      "type": "note",
      "position": {
        "x": -46.591912205639915,
        "y": 635.4963219126536
      },
      "width": 299,
      "height": 100,
      "style": {
        "width": 299,
        "height": 100
      },
      "resizing": false,
      "data": {
        "content": "<h1>SidebarContextMenu</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li><br></li></ul><p><br></p><h2>Components:</h2><ul><li>ToggleButtonGroup</li><li class=\"ql-indent-1\">Defines the following buttons as radio buttons</li><li class=\"ql-indent-1\">ToggleButton</li><li class=\"ql-indent-2\">calls <em>setToolCallback</em>('pointer')</li><li class=\"ql-indent-2\">PointerToolSvg</li><li class=\"ql-indent-1\">ToggleButton</li><li class=\"ql-indent-2\">calls <em>setToolCallback</em>('line')</li><li class=\"ql-indent-2\">LineToolSvg</li></ul><p><br></p><h2>Properties:</h2><ul><li>tool</li><li class=\"ql-indent-1\">currently selected <em>tool</em><sub>1</sub></li><li>setToolCallback</li><li class=\"ql-indent-1\">callback to change <em>tool</em></li></ul><p><br></p><h2>Description:</h2><p>Vertical toolbar on top left to switch tool setting.</p><p><br></p><p>[1] see <strong>App</strong></p>"
      }
    },
    {
      "width": 308,
      "height": 100,
      "id": "1699251457332.19575",
      "type": "note",
      "position": {
        "x": 283,
        "y": 637
      },
      "style": {
        "width": 308,
        "height": 100
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>TopbarContextMenu</h1><p><br></p><h2>Variables:</h2><ul><li>selectionType</li><li class=\"ql-indent-1\">see <em>useEffect </em>[<em>selectedNodes.length, selectedEdges.length</em>]</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>selectedNodes.length, selectedEdges.length</em>]</li><li class=\"ql-indent-1\">shorthand evaluation for what kind of selection has been made.</li><li class=\"ql-indent-2\">Possible evaluations:</li><li class=\"ql-indent-3\">'nodes'</li><li class=\"ql-indent-3\">'edges'</li><li class=\"ql-indent-3\">'both'</li><li class=\"ql-indent-3\">'none'</li><li>useEffect [<em>tool</em>]</li><li class=\"ql-indent-1\">quick fix for unselecting items by changing tools causing weird behaviour</li></ul><p><br></p><h2>Components:</h2><ul><li>div topbarContextMenu</li><li class=\"ql-indent-1\"><em>tool </em>== 'pointer'<sub>1</sub></li><li class=\"ql-indent-2\"><em>selectionType</em> == 'nodes'</li><li class=\"ql-indent-3\">NodesBar<sub>2</sub></li><li class=\"ql-indent-2\"><em>selectionType</em> == 'edges'</li><li class=\"ql-indent-3\">EdgesBar<sub>3</sub></li><li class=\"ql-indent-2\"><em>selectionType</em> == 'both'</li><li class=\"ql-indent-3\">BothBar<sub>4</sub></li><li class=\"ql-indent-1\"><em>tool == </em>'line'</li><li class=\"ql-indent-2\">LineToolBar<sub>5</sub></li></ul><p><br></p><h2>Properties:</h2><ul><li>nodes</li><li class=\"ql-indent-1\">current state of <em>nodes</em><sub><em>6</em></sub></li><li>edges</li><li class=\"ql-indent-1\">current state of <em>edges</em><sub><em>7</em></sub></li><li>setNodes</li><li class=\"ql-indent-1\">callback to modify <em>nodes</em></li><li>setEdges</li><li class=\"ql-indent-1\">callback to modify <em>edges</em></li><li>selectedNodes</li><li class=\"ql-indent-1\">list of selected <em>nodes</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">list of selected <em>edges</em></li><li>tool</li><li class=\"ql-indent-1\">current <em>tool</em><sub><em>8</em></sub></li><li>newEdge</li><li class=\"ql-indent-1\">current state of <em>newEdge</em><sub><em>9</em></sub></li><li>setNewEdge</li><li class=\"ql-indent-1\">callback to modify <em>newEdge</em></li><li>markHistory<sub>10</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p><br></p><p><br></p><p>[1][8] see <strong>SidebarContextMenu</strong></p><p>[2] see <strong>NodeBar</strong></p><p>[3] see <strong>EdgeBar</strong></p><p>[4] see <strong>BothBar</strong></p><p>[5] see <strong>NewEdgeBar</strong></p><p>[6][7][9][10] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "id": "1699251840590.87259",
      "type": "note",
      "position": {
        "x": 44.17502891140009,
        "y": 912.292507028784
      },
      "style": {
        "width": 158,
        "height": 100,
        "backgroundColor": "rgb(93, 188, 70)"
      },
      "width": 158,
      "height": 100,
      "resizing": false,
      "data": {
        "content": "<h1>NodeBar</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li><br></li></ul><p><br></p><h2>Components:</h2><ul><li>div widget-bar-descriptor</li><li class=\"ql-indent-1\">NoteSvg</li><li class=\"ql-indent-1\">length of <em>selectedNodes</em></li><li>NodeColorPicker<sub>1</sub></li><li class=\"ql-indent-1\">defaultColor = .palette{--color-high}<sub>2</sub></li></ul><p><br></p><h2>Properties:</h2><ul><li>className</li><li class=\"ql-indent-1\">wrapper div class</li><li>nodes</li><li class=\"ql-indent-1\">current state of <em>nodes</em><sub>3</sub></li><li>setNodes</li><li class=\"ql-indent-1\">callback to modify <em>nodes</em></li><li>selectedNodes</li><li class=\"ql-indent-1\">list of currently selected <em>nodes</em></li><li>markHistory<sub>4</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Contextual toolbar for <em>selectedNodes</em>.</p><p><br></p><p>[1] see <strong>NodeColorPicker</strong></p><p>[2] see <strong>App</strong></p><p>[3][4] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "width": 204,
      "height": 100,
      "id": "1699251846259.72371",
      "type": "note",
      "position": {
        "x": 222.9176827312125,
        "y": 914.5167704118644
      },
      "style": {
        "width": 204,
        "height": 100,
        "backgroundColor": "rgb(210, 176, 31)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>NewEdgeBar</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li><br></li></ul><p><br></p><h2>Components:</h2><ul><li>NewEdgeCurveSelector<sub>1</sub></li><li>NewEdgeColorPicker<sub>2</sub></li><li class=\"ql-indent-1\">defaultColor = .palette{--color-low-trans}<sub>3</sub></li><li>NewEdgeAnimationToggle<sub>4</sub></li><li>NewEdgeReverse<sub>5</sub></li><li>NewEdgeReset<sub>6</sub></li></ul><p><br></p><h2>Properties:</h2><ul><li>className</li><li class=\"ql-indent-1\">wrapper div class</li><li>newEdge</li><li class=\"ql-indent-1\">current state of <em>newEdge</em><sub>7</sub></li><li>setNewEdge</li><li class=\"ql-indent-1\">callback to modify <em>newEdge</em></li></ul><p><br></p><h2>Description:</h2><p>Contextual toolbar for line tool<sub>8</sub></p><p><br></p><p>[1] see <strong>NewEdgeCurveSelector</strong></p><p>[2] see <strong>NewEdgeColorPicker</strong></p><p>[3] see <strong>App</strong></p><p>[4] see <strong>NewEdgeAnimationToggle</strong></p><p>[5] see <strong>NewEdgeReverse</strong></p><p>[6] see <strong>NewEdgeReset</strong></p><p>[7] see <strong>GraphEditor</strong></p><p>[8] see <strong>SidebarContextMenu</strong></p>"
      }
    },
    {
      "width": 163,
      "height": 100,
      "id": "1699251853579.78221",
      "type": "note",
      "position": {
        "x": 600.1640146383713,
        "y": 914.3403021752777
      },
      "style": {
        "width": 163,
        "height": 100,
        "backgroundColor": "rgb(176, 48, 202)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>EdgeBar</h1><p><br></p><h2>Variables</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks</h2><ul><li><br></li></ul><p><br></p><h2>Components:</h2><ul><li>div widget-bar-descriptor</li><li class=\"ql-indent-1\">LineSvg</li><li class=\"ql-indent-1\">length of <em>selectedEdges</em></li><li>EdgesCurveSelector<sub>1</sub></li><li>EdgeColorPicker<sub>2</sub></li><li class=\"ql-indent-1\">defaultColor = .palette{--color-low}<sub>3</sub></li><li>EdgeAnimationToggle<sub>4</sub></li><li>EdgesReverse<sub>5</sub></li><li>EdgesReset<sub>6</sub></li></ul><p><br></p><h2>Properties:</h2><ul><li>className</li><li class=\"ql-indent-1\">wrapper div class</li><li>edges</li><li class=\"ql-indent-1\">current state of <em>edges</em><sub><em>7</em></sub></li><li>setEdges</li><li class=\"ql-indent-1\">callback to modify <em>edges</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">list of currently selected <em>edges</em></li><li>markHistory<sub>8</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Contextual toolbar for <em>selectedEdges</em>.</p><p><br></p><p>[1] see <strong>EdgesCurveSelector</strong></p><p>[2] see <strong>EdgesColorPicker</strong></p><p>[3] see <strong>App</strong></p><p>[4] see <strong>EdgesAnimationToggle</strong></p><p>[5] see <strong>EdgesReverse</strong></p><p>[6] see <strong>EdgesReset</strong></p><p>[7][8] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "width": 142,
      "height": 100,
      "id": "1699251862141.32228",
      "type": "note",
      "position": {
        "x": 442.2375364072791,
        "y": 914.5645655583576
      },
      "style": {
        "width": 142,
        "height": 100,
        "backgroundColor": "rgb(57, 144, 193)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>BothBar</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li><br></li></ul><p><br></p><h2>Components:</h2><ul><li>div widget-bar-descriptor</li><li class=\"ql-indent-1\">NoteSvg</li><li class=\"ql-indent-1\">length of <em>selectedNodes</em></li><li class=\"ql-indent-1\">LineSvg</li><li class=\"ql-indent-1\">length of <em>selectedEdges</em></li><li>BothColorPicker<sub>1</sub></li><li>EdgesAnimationToggle<sub>2</sub></li><li>BothEdgeDirection<sub>3</sub></li><li>BothReset<sub>4</sub></li></ul><p><br></p><h2>Properties:</h2><ul><li>className</li><li class=\"ql-indent-1\">wrapper div class</li><li>nodes</li><li class=\"ql-indent-1\">current state of <em>nodes</em><sub>5</sub></li><li>edges</li><li class=\"ql-indent-1\">current state of <em>edges</em><sub>6</sub></li><li>setNodes</li><li class=\"ql-indent-1\">callback to modify <em>nodes</em></li><li>setEdges</li><li class=\"ql-indent-1\">callback to modify <em>edges</em></li><li>selectedNodes</li><li class=\"ql-indent-1\">list of currently selected <em>nodes</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">list of currently selected <em>edges</em></li><li>markHistory<sub>7</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Contextual toolbar for both <em>selectedNodes</em> and <em>selectedEdges</em></p><p><br></p><p>[1] see <strong>BothColorPicker</strong></p><p>[2] see <strong>EdgesAnimationToggle</strong></p><p>[3] see <strong>BothEdgeDirection</strong></p><p>[4] see <strong>BothReset</strong></p><p>[5][6][7] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "id": "1699251873730.11856",
      "type": "note",
      "position": {
        "x": 642.4651694798218,
        "y": 461.1420041942174
      },
      "width": 207,
      "height": 100,
      "style": {
        "width": 207,
        "height": 100
      },
      "resizing": false,
      "data": {
        "content": "<h1>PaneContext</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li>newNote</li><li class=\"ql-indent-1\">function to add note at the mouse position</li></ul><p><br></p><h2>Components:</h2><ul><li>div context-menu</li><li class=\"ql-indent-1\">offset wrapper for right click menu</li><li class=\"ql-indent-1\">button context-menu-button</li><li class=\"ql-indent-2\">calls <em>newNote</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>top, left, bottom, right</li><li class=\"ql-indent-1\">offset info</li><li>setNodes</li><li class=\"ql-indent-1\">callback to modify <em>nodes</em><sub>1</sub></li><li>mouseEvent</li><li class=\"ql-indent-1\">the mouse event that resulted in this element being loaded<sub>2</sub></li><li>project</li><li class=\"ql-indent-1\">callback to reinterpret coordinates onto <strong>GraphEditor</strong></li><li>getTimeId</li><li class=\"ql-indent-1\">callback to get a random id</li><li>tool</li><li class=\"ql-indent-1\">currently selected tool</li><li>markHistory</li><li class=\"ql-indent-1\">marks history</li><li>...props</li><li class=\"ql-indent-1\">misc<sub>3</sub></li></ul><p><br></p><h2>Description:</h2><p>Context menu for right clicking on the background of <strong>GraphEditor</strong>.</p><p><br></p><p>[1] see <strong>GraphEditor</strong></p><p>[2] see <strong>GraphEditor</strong>-&gt;Callbacks-&gt;<em>project</em></p><p>[3] see <strong>GraphEditor</strong>-&gt;Callbacks-&gt;<em>onPaneContextMenu</em></p>"
      }
    },
    {
      "id": "1699252113990.40984",
      "type": "note",
      "position": {
        "x": -182.00000000000023,
        "y": 1282.9000000000003
      },
      "width": 245,
      "height": 102,
      "style": {
        "width": 245,
        "height": 102,
        "backgroundColor": "rgb(93, 188, 70)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>NodeColorPicker</h1><p><br></p><h2>Variables:</h2><ul><li>color</li><li class=\"ql-indent-1\">internal color state</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>selectedNodes</em>]</li><li class=\"ql-indent-1\">Evaluates current state of <em>selectedNodes</em> for <em>style.backgroundColor</em></li><li class=\"ql-indent-2\">sets <em>color </em>to first node's <em>style.backgroundColor</em> if all nodes are the same and <em>style.backgroundColor</em> exists</li><li class=\"ql-indent-2\">otherwise, sets <em>color </em>to <em>defaultColor</em></li><li>onChange(param)</li><li class=\"ql-indent-1\">Changes all <em>selectedNodes</em> such that all selected <em>nodes </em>have <em>style.backgroundColor</em> set to <em>param</em></li><li>onReset()</li><li class=\"ql-indent-1\">Removes <em>selectedNodes.style.backgroundColor </em>for all <em>selectedNodes</em></li><li class=\"ql-indent-2\">if that removal results in <em>selectedNodes.style</em> being empty, removes <em>selectedNodes.style</em></li><li>onToggle(nextShow, meta)</li><li class=\"ql-indent-1\">Marks undo history when the dialog box is closed</li><li class=\"ql-indent-2\">Done this way because marking history after every onChange will flood the history, and if a user is closing this dropdown then it's likely that they've changed it anyway. This solution means that there is only one history event cataloged.</li><li class=\"ql-indent-2\">One problem with this approach is if a user opens the dropdown then closes it. Went for this approach because anything else would require a falling edge detector or other such insanity, and this was the easiest to do in a short timespan.</li></ul><p><br></p><h2>Components:</h2><ul><li>ColorPickerDropdown</li><li class=\"ql-indent-1\">calls <em>onChange, onReset, onToggle</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>nodes</li><li class=\"ql-indent-1\">current state of <em>nodes</em></li><li>setNodes</li><li class=\"ql-indent-1\">callback to modify <em>nodes</em></li><li>selectedNodes</li><li class=\"ql-indent-1\">currently selected <em>nodes</em></li><li>defaultColor</li><li class=\"ql-indent-1\">default color for <em>nodes</em><sub>1</sub></li><li>markHistory<sub>2</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Implementation of <strong>ColorPickerDropdown</strong><sub><strong>3</strong></sub> for <em>nodes</em>.</p><p><br></p><p>[1] see <strong>NodeBar</strong></p><p>[2] see <strong>GraphEditor</strong></p><p>[3] see <strong>ColorPickerDropdown</strong></p>"
      }
    },
    {
      "id": "1699252182747.67726",
      "type": "note",
      "position": {
        "x": 109.5,
        "y": 1284.575
      },
      "width": 294,
      "height": 102,
      "style": {
        "width": 294,
        "height": 102,
        "backgroundColor": "rgb(210, 176, 31)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>NewEdgeColorPicker</h1><p><br></p><h2>Variables:</h2><ul><li>color</li><li class=\"ql-indent-1\">internal color state</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>newEdge</em>]</li><li class=\"ql-indent-1\">evaluates the current <em>newEdge.style </em>to set <em>color</em>. If unavailable, sets <em>color</em> to <em>defaultColor</em>.</li><li>onChange(param)</li><li class=\"ql-indent-1\">changes <em>color</em> to <em>param</em>.</li><li class=\"ql-indent-1\">changes <em>newEdge.style.stroke</em> to <em>param</em></li><li>onReset()</li><li class=\"ql-indent-1\">sets <em>color </em>to <em>defaultColor</em></li><li class=\"ql-indent-1\">removes <em>newEdge.style.stroke</em> if it exists</li><li class=\"ql-indent-2\">if that removal results in <em>newEdge.style</em> being empty, removes <em>newEdge.style</em></li></ul><p><br></p><h2>Components:</h2><ul><li>ColorPickerDropdown</li><li class=\"ql-indent-1\">calls <em>onChange, onReset</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>newEdge</li><li class=\"ql-indent-1\">current <em>newEdge</em> state</li><li>setNewEdge</li><li class=\"ql-indent-1\">callback to modify the properties of <em>newEdge</em></li><li>defaultColor</li><li class=\"ql-indent-1\">default color for <em>newEdge</em></li></ul><p><br></p><h2>Description:</h2><p>Implementation of <strong>ColorPickerDropdown</strong><sub>1</sub> for <em>newEdge</em>.</p><p><br></p><p>[1] see <strong>ColorPickerDropdown</strong></p>"
      }
    },
    {
      "width": 240,
      "height": 100,
      "id": "1699252207854.98899",
      "type": "note",
      "position": {
        "x": 447.5,
        "y": 1286.575
      },
      "style": {
        "width": 240,
        "height": 100,
        "backgroundColor": "rgb(57, 144, 193)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>BothColorPicker</h1><p><br></p><h2>Variables:</h2><ul><li>color</li><li class=\"ql-indent-1\">internal color state</li><li>defaultColor</li><li class=\"ql-indent-1\">since <em>nodes</em> and <em>edges </em>don't have the same default color, the color for this component to default to is rgb(0,0,0) (black)</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>selectedNodes, selectedEdges</em>]</li><li class=\"ql-indent-1\">sets <em>color</em> to <em>selectedNodes[0].style.backgroundColor</em> if exists and all selected edges and nodes have the same color</li><li class=\"ql-indent-1\">otherwise set <em>color</em> to <em>defaultColor</em></li><li>onChange(param)</li><li class=\"ql-indent-1\">sets <em>color </em>, selected <em>nodes</em>, and selected <em>edges'</em> styles to <em>param</em></li><li>onReset()</li><li class=\"ql-indent-1\">resets <em>color</em></li><li class=\"ql-indent-1\">removes color attributes of selected<em> nodes </em>and <em>edges</em></li><li class=\"ql-indent-2\">if resultant style is empty, removes <em>style</em></li><li>onToggle(nextShow, meta)</li><li class=\"ql-indent-1\">Marks undo history when the dialog box is closed<sub>1</sub></li></ul><p><br></p><h2>Components:</h2><ul><li>ColorPickerDropdown</li><li class=\"ql-indent-1\">calls <em>onChange, onReset, onToggle</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>nodes</li><li class=\"ql-indent-1\">current state of <em>nodes</em><sub><em>1</em></sub></li><li>edges</li><li class=\"ql-indent-1\">current state of <em>edges</em><sub><em>2</em></sub></li><li>setNodes</li><li class=\"ql-indent-1\">callback to modify <em>nodes</em></li><li>setEdges</li><li class=\"ql-indent-1\">callback to modify <em>edges</em></li><li>selectedNodes</li><li class=\"ql-indent-1\">list of currently selected <em>nodes</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">list of currently selected <em>edges</em></li><li>markHistory<sub>3</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Implementation of <strong>ColorPickerDropdown</strong><sub>4</sub> for <em>nodes</em> and <em>edges</em>.</p><p><br></p><p>[1][2][3] see <strong>GraphEditor</strong></p><p>[4] see <strong>ColorPickerDropdown</strong></p>"
      }
    },
    {
      "width": 294,
      "height": 100,
      "id": "1699252222599.78529",
      "type": "note",
      "position": {
        "x": 729.5,
        "y": 1287.575
      },
      "style": {
        "width": 294,
        "height": 100,
        "backgroundColor": "rgb(176, 48, 202)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>EdgesColorPicker</h1><p><br></p><h2>Variables:</h2><ul><li>color</li><li class=\"ql-indent-1\">internal color state</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>selectedEdges</em>]</li><li class=\"ql-indent-1\">Evaluates current state of <em>selectedEdges</em> for <em>style.stroke</em></li><li class=\"ql-indent-2\">sets <em>color </em>to first edge's <em>style.stroke </em>if all edges are the same and <em>style.stroke </em>exists</li><li class=\"ql-indent-2\">otherwise, sets <em>color </em>to <em>defaultColor</em></li><li>onChange(param)</li><li class=\"ql-indent-1\">Changes all <em>selectedEdges</em> such that all selected <em>edges </em>have <em>style.stroke </em>set to <em>param</em></li><li>onReset()</li><li class=\"ql-indent-1\">Removes <em>selectedEdges.style.stroke </em>for all <em>selectedEdges</em></li><li class=\"ql-indent-2\">if that removal results in <em>selectedEdges.style</em> being empty, removes <em>selectedEdges.style</em></li><li>onToggle(nextShow, meta)</li><li class=\"ql-indent-1\">Marks undo history when the dialog box is closed<sub>1</sub></li></ul><p><br></p><h2>Components:</h2><ul><li>ColorPickerDropdown</li><li class=\"ql-indent-1\">calls <em>onChange, onReset, onToggle</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>edges</li><li class=\"ql-indent-1\">Current state of <em>edges</em><sub>2</sub></li><li>setEdges</li><li class=\"ql-indent-1\">Callback to modify <em>edges</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">List of currently selected <em>edges</em></li><li>defaultColor</li><li class=\"ql-indent-1\">default color for <em>edges</em><sub>3</sub></li><li>markHistory</li><li class=\"ql-indent-1\">Callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Implementation of <strong>ColorPickerDropdown</strong><sub>4</sub> for edges.</p><p><br></p><p>[1] see explanation in <strong>NodeColorPicker</strong></p><p>[1][2][3] see <strong>GraphEditor</strong></p><p>[4] see <strong>ColorPickerDropdown</strong></p>"
      }
    },
    {
      "id": "1699252263581.81195",
      "type": "note",
      "position": {
        "x": -529.754860953991,
        "y": 1254.027204615883
      },
      "width": 307,
      "height": 100,
      "style": {
        "width": 307,
        "height": 100,
        "backgroundColor": "rgb(255, 255, 255)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>ColorPickerDropdown</h1><p><br></p><h2>Variables:</h2><ul><li>hexColor</li><li class=\"ql-indent-1\">state of <strong>HexColorInput</strong></li></ul><p><br></p><h2>Callbacks:</h2><ul><li>rgbToHex(r, g, b)</li><li class=\"ql-indent-1\">converts three rgb values to a hexadecimal color string</li><li class=\"ql-indent-1\">see FelipeC's answer to <a href=\"https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\" rel=\"noopener noreferrer\" target=\"_blank\">https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb</a></li><li>hexToRgb(hex)</li><li class=\"ql-indent-1\">converts hexadecimal color string to rgb object</li><li class=\"ql-indent-1\">see Tim Down's answer to <a href=\"https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\" rel=\"noopener noreferrer\" target=\"_blank\">https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb</a></li><li>useEffect [<em>color</em>]</li><li class=\"ql-indent-1\">sets <em>hexColor</em> when <em>color</em> is modified by <strong>RgbStringColorPicker</strong></li><li class=\"ql-indent-1\">see RajeshP's answer to <a href=\"https://stackoverflow.com/questions/42827884/split-a-number-from-a-string-in-javascript\" rel=\"noopener noreferrer\" target=\"_blank\">https://stackoverflow.com/questions/42827884/split-a-number-from-a-string-in-javascript</a></li><li>hexChangeColor(hex)</li><li class=\"ql-indent-1\">converts value from <strong>HexColorInput</strong> and converts it into rgb(r,g,b) format, then calls <em>onChange</em> on the conversion</li></ul><p><br></p><h2>Components:</h2><ul><li>Dropdown</li><li class=\"ql-indent-1\">Dropdown.Toggle</li><li class=\"ql-indent-2\">calls <em>onToggle</em></li><li class=\"ql-indent-2\">div</li><li class=\"ql-indent-3\">Box that displays value of <em>color</em></li><li class=\"ql-indent-1\">Dropdown.Menu</li><li class=\"ql-indent-2\">RgbStringColorPicker</li><li class=\"ql-indent-3\"><em>react-colorful</em></li><li class=\"ql-indent-3\">calls <em>onChange</em></li><li class=\"ql-indent-3\">Color picker</li><li class=\"ql-indent-2\">div</li><li class=\"ql-indent-3\">div for alignment of components</li><li class=\"ql-indent-3\">HexColorInput</li><li class=\"ql-indent-4\"><em>react-colorful</em></li><li class=\"ql-indent-4\">calls <em>hexChangeColor</em></li><li class=\"ql-indent-4\">hexadecimal display of current color</li><li class=\"ql-indent-3\">Button</li><li class=\"ql-indent-4\">calls <em>onReset</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>color</li><li class=\"ql-indent-1\">Current color variable.</li><li>onChange</li><li class=\"ql-indent-1\">Callback to fire when <strong>RgbColorPicker</strong> changes.</li><li>onReset</li><li class=\"ql-indent-1\">Callback to fire when the reset <strong>Button </strong>is clicked.</li><li>onToggle</li><li class=\"ql-indent-1\">Callback to fire when <strong>Dropdown</strong> is toggled.</li></ul><p><br></p><h2>Description:</h2><p>Abstracted component for selecting and resetting color.</p>"
      }
    },
    {
      "id": "1699252289037.38367",
      "type": "note",
      "position": {
        "x": 98.5,
        "y": 1109.7750000000003
      },
      "width": 332,
      "height": 100,
      "style": {
        "width": 332,
        "height": 100,
        "backgroundColor": "rgb(210, 176, 31)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>NewEdgeCurveSelector</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li>onClick(param)</li><li class=\"ql-indent-1\">sets <em>newEdge.type</em> to the item selected by <strong>CurveDropdown</strong></li></ul><p><br></p><h2>Components:</h2><ul><li>CurveDropdown</li><li class=\"ql-indent-1\">calls <em>onClick</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>newEdge</li><li class=\"ql-indent-1\">current <em>newEdge</em> state</li><li>setNewEdge</li><li class=\"ql-indent-1\">callback to modify the properties of <em>newEdge</em></li></ul><p><br></p><h2>Description:</h2><p>Implementation of <strong>CurveDropdown</strong><sub>1</sub> for <em>newEdge.</em></p><p><br></p><p>[1] see <strong>CurveDropdown</strong></p>"
      }
    },
    {
      "width": 332,
      "height": 100,
      "id": "1699252341536.99116",
      "type": "note",
      "position": {
        "x": 706.5,
        "y": 1106.7750000000003
      },
      "style": {
        "width": 332,
        "height": 100,
        "backgroundColor": "rgb(176, 48, 202)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>EdgeCurveSelector</h1><p><br></p><h2>Variables:</h2><ul><li>type</li><li class=\"ql-indent-1\">current state of selected <em>edge</em>'s type</li><li>title</li><li class=\"ql-indent-1\">hover title for <strong>CurveDropdown</strong></li></ul><p><br></p><h2>Callbacks:</h2><ul><li>onClick(param)</li><li class=\"ql-indent-1\">changes all selected <em>edge</em>'s types to <em>param</em></li><li class=\"ql-indent-1\">sets <em>type</em> to <em>param</em></li><li class=\"ql-indent-1\">reevaluates <em>title</em></li><li class=\"ql-indent-1\">marks history</li></ul><p><br></p><h2>Components:</h2><ul><li>CurveDropdown</li><li class=\"ql-indent-1\">calls <em>onClick</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>edges</li><li class=\"ql-indent-1\">Current state of <em>edges</em><sub>1</sub></li><li>setEdges</li><li class=\"ql-indent-1\">Callback to modify <em>edges</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">List of currently selected <em>edges</em></li><li>markHistory<sub>2</sub></li><li class=\"ql-indent-1\">Callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Implementation of <strong>CurveDropdown</strong><sub>3</sub> for <em>edges.</em></p><p><br></p><p>[1][2] see <strong>GraphEditor</strong></p><p>[3] see <strong>CurveDropdown</strong></p>"
      }
    },
    {
      "id": "1699252478436.23482",
      "type": "note",
      "position": {
        "x": 82.5,
        "y": 1447.575
      },
      "width": 365,
      "height": 100,
      "style": {
        "width": 365,
        "height": 100,
        "backgroundColor": "rgb(210, 176, 31)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>NewEdgeAnimationToggle</h1><p><br></p><h2>Variables:</h2><ul><li>boolstate</li><li class=\"ql-indent-1\">internal tracker for <em>newEdge.animated </em>state</li><li class=\"ql-indent-1\">used because <em>!newEdge.animated</em> would likely cause a crash for doing a boolean operation on an undefined object</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>newEdge.animated</em>]</li><li class=\"ql-indent-1\">checks if <em>newEdge.animated </em>exists.</li><li class=\"ql-indent-2\">If yes, set <em>boolstate</em> true</li><li class=\"ql-indent-2\">Else, set <em>boolstate </em>false</li><li class=\"ql-indent-1\">done so <strong>Button</strong>'s svg children update cleanly (and as an artifact of debug title text)</li><li>useEffect [setNewEdge, newEdge.reversed, newEdge.animated, boolstate]</li><li class=\"ql-indent-1\">applies <em>newEdge.svgWrapperStyle </em>based on <em>newEdge.reversed </em>and <em>boolstate</em></li><li class=\"ql-indent-2\">if <em>newEdge.reversed </em>doesn't exist</li><li class=\"ql-indent-3\">if <em>newEgge.animated</em></li><li class=\"ql-indent-4\">apply forward-crawling dashed line animation</li><li class=\"ql-indent-3\">else</li><li class=\"ql-indent-4\">remove animation</li><li class=\"ql-indent-2\">else (if <em>newEdge.reversed</em> exists)</li><li class=\"ql-indent-3\">if <em>newEdge.animated</em></li><li class=\"ql-indent-4\">apply reverse-crawling dashed line animation</li><li class=\"ql-indent-3\">else</li><li class=\"ql-indent-4\">remove animation</li><li>onClick()</li><li class=\"ql-indent-1\">sets <em>boolstate</em> to its inverse, flipping it</li><li class=\"ql-indent-1\">sets <em>newEdge.animated</em> to <em>boolstate</em>'s inverse, as it will only update when the function is exited. If boolstate is false, sets <em>newEdge.animated</em> to <em>undefined</em></li></ul><p><br></p><h2>Components:</h2><ul><li>Button</li><li class=\"ql-indent-1\">calls <em>onClick</em></li><li class=\"ql-indent-1\">StraightSvg</li><li class=\"ql-indent-1\">DashedSvg</li></ul><p><br></p><h2>Properties:</h2><ul><li>newEdge</li><li class=\"ql-indent-1\">current <em>newEdge</em> state</li><li>setNewEdge</li><li class=\"ql-indent-1\">callback to modify the properties of <em>newEdge</em></li></ul><p><br></p><h2>Description:</h2><p>Toggles animation state of <em>newEdge</em>. If <em>reverse</em> flag<sub>1</sub> exists, applies a reversed animation on the svg of the edge. An svg animation is used because <em>reactflow </em>does not have an <em>animation</em> property for connection lines, but does have a <em>connectionLineStyle</em> property. Also applies a new <em>animated</em> property, which is carried over when the <em>newEdge</em> is used as a template for a new edge.</p><p><br></p><p>[1] see <strong>NewEdgeReverse</strong></p>"
      }
    },
    {
      "width": 365,
      "height": 100,
      "id": "1699252500670.83383",
      "type": "note",
      "position": {
        "x": 722.5,
        "y": 1445.575
      },
      "style": {
        "width": 365,
        "height": 100,
        "backgroundColor": "rgb(176, 48, 202)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>EdgesAnimationToggle</h1><p><br></p><h2>Variables:</h2><ul><li>boolstate</li><li class=\"ql-indent-1\">internal tracker for animation state</li><li class=\"ql-indent-1\">used for setting edges</li><li>title</li><li class=\"ql-indent-1\">ternary status of <em>selectedEdges</em> animation state</li><li class=\"ql-indent-1\">unused, debug artifact</li><li>SvgElement</li><li class=\"ql-indent-1\">display svg</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>edges, selectedEdges, setBoolstate</em>]</li><li class=\"ql-indent-1\">tracks current state of selected <em>edges</em></li><li class=\"ql-indent-2\">if all of them are animated, (<em>boolstate</em>=true) and (<em>SvgElement</em>=DashedSvg)</li><li class=\"ql-indent-2\">if some of them are animated, (<em>boolstate</em>=false) and (<em>SvgElement</em>=DashedSlashStraighSvg)</li><li class=\"ql-indent-2\">if none of them are animated, (<em>boolstate</em>=false) and (<em>SvgElement</em>=StraightSvg)</li><li>onClick()</li><li class=\"ql-indent-1\">sets each selected <em>edge</em>'s <em>edge.animated</em> to true if <em>boolstate </em>is about to be set to true</li><li class=\"ql-indent-2\">confusing logic, but done this way because useState changes are only updated after exiting the function</li><li class=\"ql-indent-2\">if <em>boolstate</em> is about to be set to false, remove <em>edge.animated</em></li><li class=\"ql-indent-1\">sets <em>boolstate</em> to it's inverse</li><li class=\"ql-indent-1\">marks history</li></ul><p><br></p><h2>Components:</h2><ul><li>Button</li><li class=\"ql-indent-1\">calls <em>onClick</em></li><li class=\"ql-indent-1\"><em>SvgElement</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>edges</li><li class=\"ql-indent-1\">Current state of <em>edges</em><sub>1</sub></li><li>setEdges</li><li class=\"ql-indent-1\">Callback to modify <em>edges</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">Currently selected <em>edges</em></li><li>markHistory<sub>2</sub></li><li class=\"ql-indent-1\">Callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Toggles animation state on selected <em>edges</em>.</p><p><br></p><p>[1][2][3] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "id": "1699252545946.99674",
      "type": "note",
      "position": {
        "x": 119.437492504121,
        "y": 1595.7146873631227
      },
      "width": 277,
      "height": 100,
      "style": {
        "width": 277,
        "height": 100,
        "backgroundColor": "rgb(210, 176, 31)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>NewEdgeReverse</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li>onClick()</li><li class=\"ql-indent-1\">Applies <em>reversed</em> flag if there isn't one already.</li><li class=\"ql-indent-1\">If <em>reversed</em> already exists, removes it.</li></ul><p><br></p><h2>Components:</h2><ul><li>Button</li><li class=\"ql-indent-1\">calls <em>onClick</em></li><li class=\"ql-indent-1\">Disabled when <em>newEdge.animated</em> isn't true.</li></ul><p><br></p><h2>Properties:</h2><ul><li>newEdge</li><li class=\"ql-indent-1\">current <em>newEdge </em>state</li><li>setNewEdge</li><li class=\"ql-indent-1\">callback to modify the properties of <em>newEdge</em></li></ul><p><br></p><h2>Description:</h2><p>Button that sets a <em>reverse</em> flag on <em>newEdge</em><sub><em>1</em></sub>. Intended for reversing the dotted line animation, and for swapping <em>source </em>and <em>target</em><sub><em>2</em></sub><em> </em>when placing.</p><p><br></p><p>[1][2] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "width": 282,
      "height": 100,
      "id": "1699252561703.63215",
      "type": "note",
      "position": {
        "x": 750.9815296072254,
        "y": 1605.3543947152557
      },
      "tool": "pointer",
      "style": {
        "width": 282,
        "height": 100,
        "backgroundColor": "rgb(176, 48, 202)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>EdgesReverse</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li>onClick()</li><li class=\"ql-indent-1\">Swaps each selected edge's <em>source </em>and <em>target</em> properties.</li></ul><p><br></p><h2>Components:</h2><ul><li>Button</li><li class=\"ql-indent-1\">calls <em>onClick</em></li><li class=\"ql-indent-1\">Disabled if there aren't any animated edges where the effect would be visible</li></ul><p><br></p><h2>Properties:</h2><ul><li>edges</li><li class=\"ql-indent-1\">current state of <em>edges</em><sub><em>1</em></sub></li><li>setEdges</li><li class=\"ql-indent-1\">callback to modify <em>edges</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">list of currently selected <em>edges</em></li><li>markHistory<sub>2</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Reverses direction of selected edges.</p>"
      }
    },
    {
      "width": 271,
      "height": 101,
      "id": "1699252593428.15642",
      "type": "note",
      "position": {
        "x": 437.23529764511954,
        "y": 1598.2661605969622
      },
      "resizing": false,
      "tool": "pointer",
      "style": {
        "width": 271,
        "height": 101,
        "backgroundColor": "rgb(57, 144, 193)"
      },
      "data": {
        "content": "<h1>BothEdgeDirection</h1><p><br></p><h2>Variables:</h2><ul><li>disable</li><li class=\"ql-indent-1\">determines whether to disable this component</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>selectedNodes, selectedEdges</em>]</li><li class=\"ql-indent-1\">state manager for <em>disable</em></li><li class=\"ql-indent-1\">if <em>selectedNodes.length</em> != 1</li><li class=\"ql-indent-2\">it leads to logical confusion, as setting the flow direction would be noncongruent with itself, so disable component</li><li class=\"ql-indent-1\">if <em>selectedEdges.length == </em>0</li><li class=\"ql-indent-2\">Impossible state due to <strong>BothBar</strong><sub>1</sub> only ever being enabled when <em>selectedEdges.length</em> &gt; 0, but prevents a crash when deleting selection.</li><li class=\"ql-indent-1\">if any selected <em>edge</em> doesn't point to the currently selected <em>node</em></li><li class=\"ql-indent-2\">Logical confusion, disable component</li><li class=\"ql-indent-1\">if all checks pass, enable component</li><li>flowInward()</li><li class=\"ql-indent-1\">sets all selected <em>edge</em>s to point to the currently selected <em>node</em></li><li class=\"ql-indent-2\">if <em>edge</em> already points to <em>node</em>, skip</li><li class=\"ql-indent-1\">mark history</li><li>flowOutward()</li><li class=\"ql-indent-1\">sets all selected <em>edge</em>s to point away from the currently selected <em>node</em></li><li class=\"ql-indent-2\">if <em>edge</em> already points away from <em>node</em>, skip</li><li class=\"ql-indent-1\">mark history</li></ul><p><br></p><h2>Components:</h2><ul><li>ButtonGroup</li><li class=\"ql-indent-1\">Button</li><li class=\"ql-indent-2\">calls <em>flowInward</em></li><li class=\"ql-indent-1\">NoteSvg</li><li class=\"ql-indent-1\">Button</li><li class=\"ql-indent-2\">calls flowOutward</li></ul><p><br></p><h2>Properties:</h2><ul><li>setEdges</li><li class=\"ql-indent-1\">callback to modify <em>edges</em><sub>1</sub></li><li>selectedNodes</li><li class=\"ql-indent-1\">list of currently selected <em>nodes</em><sub><em>2</em></sub></li><li>selectedEdges</li><li class=\"ql-indent-1\">list of currently selected <em>edges</em></li><li>markHistory<sub>3</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Button group that, when one node and it's edges are selected, can reverse selected edges.</p><p><br></p><p>[1][2][3] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "id": "1699252618182.8138",
      "type": "note",
      "position": {
        "x": 127.53168109425303,
        "y": 1743.6347214976513
      },
      "width": 236,
      "height": 100,
      "style": {
        "width": 236,
        "height": 100,
        "backgroundColor": "rgb(210, 176, 31)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>NewEdgeReset</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li>onClick()</li><li class=\"ql-indent-1\">overwrites properties of <em>newEdge </em>to a styleless straight curve</li></ul><p><br></p><h2>Components:</h2><ul><li>Button</li><li class=\"ql-indent-1\">calls <em>onClick</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>setNewEdge</li><li class=\"ql-indent-1\">callback to overwrite the properties of <em>newEdge</em></li></ul><p><br></p><h2>Description:</h2><p>Button that resets all style, animation, curve, and reverse properties of <em>newEdge</em><sub><em>1</em></sub></p><p><br></p><p>[1] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "width": 210,
      "height": 100,
      "id": "1699252632481.73713",
      "type": "note",
      "position": {
        "x": 755.9874840790641,
        "y": 1757.5942825258512
      },
      "tool": "pointer",
      "style": {
        "width": 210,
        "height": 100,
        "backgroundColor": "rgb(176, 48, 202)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>EdgesReset</h1><p><br></p><h2>Variables</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks</h2><ul><li>onClick()</li><li class=\"ql-indent-1\">Sets each selected edge to a sanitized version.</li><li class=\"ql-indent-1\">Does not unreverse, as that may have consequences with paired bi-directional edges.</li></ul><p><br></p><h2>Components:</h2><ul><li>Button</li><li class=\"ql-indent-1\">calls <em>onClick</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>setEdges</li><li class=\"ql-indent-1\">callback to modify <em>edges</em><sub>1</sub></li><li>selectedEdges</li><li class=\"ql-indent-1\">array of selected <em>edges</em></li><li>markHistory<sub>2</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description</h2><p>Button that resets all style, animation, and curve properties of <em>selectedEdges</em><sub><em>3</em></sub></p><p><br></p><p>[1][2][3] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "width": 201,
      "height": 100,
      "id": "1699252657189.42933",
      "type": "note",
      "position": {
        "x": 465.3566145605205,
        "y": 1748.5492333995642
      },
      "style": {
        "width": 201,
        "height": 100,
        "backgroundColor": "rgb(57, 144, 193)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>BothReset</h1><p><br></p><h2>Variables</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks</h2><ul><li>onClick()</li><li class=\"ql-indent-1\">removes all selected <em>node</em>s' <em>node.style.backgroundColor</em></li><li class=\"ql-indent-2\">if the removal of <em>node.style.backgroundColor </em>results in <em>node.style</em> being empty, removes <em>node.style</em></li><li class=\"ql-indent-1\">removes all selected <em>edge</em>s' <em>edge.animated, edge.style.stroke</em></li><li class=\"ql-indent-2\">if the removal of <em>edge.style.stroke</em>results in <em>edge.style </em>being empty, removes <em>edge.style</em></li><li class=\"ql-indent-3\">intended to just remove color and animation. Does not touch <em>edge.type </em>as it may be unwanted. Instead, selecting just the edges and resetting would be safer.</li><li class=\"ql-indent-1\">marks history</li></ul><p><br></p><h2>Components:</h2><ul><li>Button</li><li class=\"ql-indent-1\">calls <em>onClick</em></li></ul><p><br></p><h2>Properties:</h2><ul><li>setNodes</li><li class=\"ql-indent-1\">callback to change current state of <em>nodes</em><sub><em>1</em></sub></li><li>setEdges</li><li class=\"ql-indent-1\">callback to change current state of <em>edges</em><sub><em>2</em></sub></li><li>selectedNodes</li><li class=\"ql-indent-1\">list of currently selected <em>nodes</em></li><li>selectedEdges</li><li class=\"ql-indent-1\">list of currently selected <em>edges</em></li><li>markHistory<sub>3</sub></li><li class=\"ql-indent-1\">callback to mark history</li></ul><p><br></p><h2>Description:</h2><p>Button that resets all style, animation, and curve properties of selected <em>edges</em>, and all style properties of selected <em>nodes.</em></p><p><br></p><p>[1][2][3] see <strong>GraphEditor</strong></p>"
      }
    },
    {
      "width": 257,
      "height": 100,
      "id": "1699291227315.26488",
      "type": "note",
      "position": {
        "x": -456.6738627282077,
        "y": 1094.9770238042206
      },
      "style": {
        "width": 257,
        "height": 100,
        "backgroundColor": "rgb(255, 255, 255)"
      },
      "resizing": false,
      "tool": "pointer",
      "data": {
        "content": "<h1>CurveDropdown</h1><p><br></p><h2>Variables:</h2><ul><li>SvgElement</li></ul><p><br></p><h2>Callbacks:</h2><ul><li>useEffect [<em>type</em>]</li><li class=\"ql-indent-1\">Changes <em>SvgElement</em> based on <em>type </em></li></ul><p><br></p><h2>Components:</h2><ul><li>Dropdown</li><li class=\"ql-indent-1\">Dropdown.Toggle</li><li class=\"ql-indent-2\"><em>SvgElement</em></li><li class=\"ql-indent-3\">Display svg for selected type</li><li class=\"ql-indent-1\">Dropwdown.Menu</li><li class=\"ql-indent-2\">Dropdown.Item... (x3)</li><li class=\"ql-indent-3\">Button that calls <em>onClickCallback</em> with the specified type</li></ul><p><br></p><h2>Properties:</h2><ul><li>title</li><li class=\"ql-indent-1\">Hover text</li><li>onClickCallback</li><li class=\"ql-indent-1\">Callback for when an item from <strong>Dropdown.Menu</strong> is selected</li><li>type</li><li class=\"ql-indent-1\">Current type</li></ul><p><br></p><h2>Description:</h2><p>Abstracted component for selecting curve types.</p>"
      }
    },
    {
      "id": "1699294686459.55552",
      "type": "note",
      "position": {
        "x": 1213.5527842165648,
        "y": 1913.387211456079
      },
      "width": 138,
      "height": 100,
      "style": {
        "width": 138,
        "height": 100,
        "backgroundColor": "rgb(255, 255, 255)"
      },
      "resizing": false,
      "data": {
        "content": "<h1>utils</h1><p><br></p><h2>Functions:</h2><ul><li><br></li></ul><p><br></p><h2>Description:</h2><p>Utility functions for cleaner code.</p>"
      }
    },
    {
      "id": "1699296472957.44910",
      "type": "note",
      "position": {
        "x": -556.7389357544446,
        "y": 1452.575
      },
      "width": 347,
      "height": 100,
      "style": {
        "width": 347,
        "height": 100,
        "backgroundColor": "rgb(255, 255, 255)"
      },
      "resizing": false,
      "data": {
        "content": "<h2>EdgeAnimationKeyframes.css</h2><p>Defines the forward-crawling and reverse-crawling vector animations for <strong>NewEdgeAnimationToggle</strong>.</p>"
      }
    },
    {
      "id": "1699383781360.2133",
      "type": "note",
      "position": {
        "x": -54.13069045351386,
        "y": 392.26344734945377
      },
      "width": 183,
      "height": 100,
      "style": {
        "width": 183,
        "height": 100
      },
      "resizing": false,
      "data": {
        "content": "<h1>NoteNode</h1><p><br></p><h2>Variables:</h2><ul><li><br></li></ul><p><br></p><h2>Callbacks:</h2><ul><li><br></li></ul><p><br></p><h2>Components:</h2><ul><li><br></li></ul><p><br></p><h2>Properties:</h2><ul><li><br></li></ul><p><br></p><h2>Description:</h2><p><br></p>"
      }
    },
    {
      "id": "1699995900067.29400",
      "type": "note",
      "position": {
        "x": 43.346976405862364,
        "y": 216.0472148917283
      },
      "style": {
        "backgroundColor": "rgb(255, 255, 255)"
      },
      "width": 130,
      "height": 100,
      "data": {
        "content": "<h1>utils</h1><p><br></p><h2>Functions:</h2><ul><li>sanitizeEdgesFromStorage(data, props)</li><li class=\"ql-indent-1\">cleans edges of unnecessary data for saving</li><li>sanitizeNodesFromStorage(data, props)</li><li class=\"ql-indent-1\">cleans nodes of unnecessary data for saving</li><li>sanitizeEdgesForStorage(props)</li><li class=\"ql-indent-1\">adds data necessary for displaying edges</li><li>sanitizeNodesForStorage(props)</li><li class=\"ql-indent-1\">adds data necessary for displaying nodes</li></ul><p><br></p><h2>Description:</h2><p>Utility functions for cleaner code.</p>"
      }
    }
  ],
  "edges": [
    {
      "type": "straight",
      "id": "1699250913247.72471",
      "source": "1699250638486.71929",
      "target": "1699250791239.69913"
    },
    {
      "type": "default",
      "style": {
        "stroke": "rgb(125, 29, 29)"
      },
      "id": "1699251561984.81667",
      "source": "1699250638486.71929",
      "target": "1699250638486.71929"
    },
    {
      "type": "straight",
      "id": "1699251690346.40041",
      "source": "1699250638486.71929",
      "target": "1699250819347.75186"
    },
    {
      "type": "straight",
      "id": "1699251740598.32654",
      "source": "1699250920271.55875",
      "target": "1699250791239.69913"
    },
    {
      "type": "straight",
      "id": "1699251743804.66999",
      "source": "1699250920271.55875",
      "target": "1699250923417.98372"
    },
    {
      "type": "straight",
      "id": "1699251745099.28020",
      "source": "1699250819347.75186",
      "target": "1699250923417.98372"
    },
    {
      "type": "straight",
      "id": "1699251746259.1297",
      "source": "1699250920271.55875",
      "target": "1699251415847.99844"
    },
    {
      "type": "straight",
      "id": "1699251747133.80154",
      "source": "1699250920271.55875",
      "target": "1699251457332.19575"
    },
    {
      "type": "straight",
      "id": "1699251754019.33930",
      "source": "1699250920271.55875",
      "target": "1699250819347.75186"
    },
    {
      "type": "straight",
      "id": "1699251840590.87259",
      "source": "1699251457332.19575",
      "target": "1699251840590.87259",
      "style": {
        "stroke": "rgb(93, 188, 70)"
      }
    },
    {
      "type": "straight",
      "id": "1699251846259.39926",
      "source": "1699251457332.19575",
      "target": "1699251846259.72371",
      "style": {
        "stroke": "rgb(210, 176, 31)"
      }
    },
    {
      "type": "straight",
      "id": "1699251853580.26831",
      "source": "1699251457332.19575",
      "target": "1699251853579.78221",
      "style": {
        "stroke": "rgb(176, 48, 202)"
      }
    },
    {
      "type": "straight",
      "id": "1699251862141.16728",
      "source": "1699251457332.19575",
      "target": "1699251862141.32228",
      "style": {
        "stroke": "rgb(57, 144, 193)"
      }
    },
    {
      "type": "straight",
      "id": "1699252249998.44457",
      "source": "1699251840590.87259",
      "target": "1699252113990.40984",
      "style": {
        "stroke": "rgb(93, 188, 70)"
      }
    },
    {
      "type": "straight",
      "id": "1699252250875.68520",
      "source": "1699251846259.72371",
      "target": "1699252182747.67726",
      "style": {
        "stroke": "rgb(210, 176, 31)"
      }
    },
    {
      "type": "straight",
      "id": "1699252251630.96608",
      "source": "1699251862141.32228",
      "target": "1699252207854.98899",
      "style": {
        "stroke": "rgb(57, 144, 193)"
      }
    },
    {
      "type": "straight",
      "id": "1699252252473.53048",
      "source": "1699251853579.78221",
      "target": "1699252222599.78529",
      "style": {
        "stroke": "rgb(176, 48, 202)"
      }
    },
    {
      "type": "step",
      "id": "1699252280501.1363",
      "source": "1699252263581.81195",
      "target": "1699252113990.40984",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699252281191.83515",
      "source": "1699252263581.81195",
      "target": "1699252182747.67726",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699252282194.36447",
      "source": "1699252263581.81195",
      "target": "1699252207854.98899",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699252283866.36667",
      "source": "1699252263581.81195",
      "target": "1699252222599.78529",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "straight",
      "id": "1699252360836.63655",
      "source": "1699252222599.78529",
      "target": "1699252222599.78529"
    },
    {
      "type": "straight",
      "id": "1699252363925.56466",
      "source": "1699251846259.72371",
      "target": "1699252289037.38367",
      "style": {
        "stroke": "rgb(210, 176, 31)"
      }
    },
    {
      "type": "straight",
      "id": "1699252365058.6386",
      "source": "1699251853579.78221",
      "target": "1699252341536.99116",
      "style": {
        "stroke": "rgb(176, 48, 202)"
      }
    },
    {
      "type": "straight",
      "id": "1699252511709.41585",
      "source": "1699251853579.78221",
      "target": "1699252500670.83383",
      "style": {
        "stroke": "rgb(176, 48, 202)"
      }
    },
    {
      "type": "straight",
      "id": "1699252513031.20924",
      "source": "1699251846259.72371",
      "target": "1699252478436.23482",
      "style": {
        "stroke": "rgb(210, 176, 31)"
      }
    },
    {
      "type": "straight",
      "id": "1699252570421.78927",
      "source": "1699251853579.78221",
      "target": "1699252561703.63215",
      "style": {
        "stroke": "rgb(176, 48, 202)"
      }
    },
    {
      "type": "straight",
      "id": "1699252577273.83966",
      "source": "1699251846259.72371",
      "target": "1699252545946.99674",
      "style": {
        "stroke": "rgb(210, 176, 31)"
      }
    },
    {
      "type": "straight",
      "id": "1699252596274.95637",
      "source": "1699251862141.32228",
      "target": "1699252593428.15642",
      "style": {
        "stroke": "rgb(57, 144, 193)"
      }
    },
    {
      "type": "straight",
      "id": "1699252652803.12340",
      "source": "1699251853579.78221",
      "target": "1699252632481.73713",
      "style": {
        "stroke": "rgb(176, 48, 202)"
      }
    },
    {
      "type": "straight",
      "id": "1699252654100.21901",
      "source": "1699251846259.72371",
      "target": "1699252618182.8138",
      "style": {
        "stroke": "rgb(210, 176, 31)"
      }
    },
    {
      "type": "straight",
      "id": "1699252657189.86861",
      "source": "1699251862141.32228",
      "target": "1699252657189.42933",
      "style": {
        "stroke": "rgb(57, 144, 193)"
      }
    },
    {
      "type": "step",
      "id": "1699291242231.73578",
      "source": "1699291227315.26488",
      "target": "1699252289037.38367",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699291243831.13971",
      "source": "1699291227315.26488",
      "target": "1699252341536.99116",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294772127.80810",
      "source": "1699252289037.38367",
      "target": "1699252289037.38367"
    },
    {
      "type": "step",
      "id": "1699294785116.6615",
      "source": "1699252113990.40984",
      "target": "1699294686459.55552",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294792132.36192",
      "source": "1699252207854.98899",
      "target": "1699294686459.55552",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294795429.2819",
      "source": "1699252222599.78529",
      "target": "1699294686459.55552",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294828669.91206",
      "source": "1699294686459.55552",
      "target": "1699252341536.99116",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294830380.54229",
      "source": "1699294686459.55552",
      "target": "1699252500670.83383",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294831857.61321",
      "source": "1699294686459.55552",
      "target": "1699252561703.63215",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294833623.86944",
      "source": "1699294686459.55552",
      "target": "1699252632481.73713",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294851344.8768",
      "source": "1699294686459.55552",
      "target": "1699252593428.15642",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699294852895.32492",
      "source": "1699294686459.55552",
      "target": "1699252657189.42933",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "step",
      "id": "1699296529873.7614",
      "source": "1699296472957.44910",
      "target": "1699252478436.23482",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    },
    {
      "type": "straight",
      "id": "1699303028442.94375",
      "source": "1699251862141.32228",
      "target": "1699252500670.83383",
      "style": {
        "stroke": "rgb(57, 144, 193)"
      }
    },
    {
      "type": "straight",
      "id": "1699305006142.91064",
      "source": "1699250920271.55875",
      "target": "1699251873730.11856"
    },
    {
      "type": "straight",
      "id": "1699383785480.8278",
      "source": "1699250920271.55875",
      "target": "1699383781360.2133"
    },
    {
      "type": "straight",
      "id": "1699995430908.12658",
      "source": "1699250638486.71929",
      "target": "1699250920271.55875"
    },
    {
      "type": "straight",
      "id": "1699995436156.28250",
      "source": "1699250638486.71929",
      "target": "1699250923417.98372"
    },
    {
      "type": "straight",
      "id": "1699995893996.26986",
      "source": "1699250791239.69913",
      "target": "1699250791239.69913"
    },
    {
      "type": "step",
      "id": "1699995900067.29400",
      "source": "1699250791239.69913",
      "target": "1699995900067.29400",
      "style": {
        "stroke": "rgb(255, 255, 255)"
      }
    }
  ]
}